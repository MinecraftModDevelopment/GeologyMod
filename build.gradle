buildscript {
    repositories {
        jcenter()
        maven {
            name 'forge'
            url 'http://files.minecraftforge.net/maven'
        }
        maven {
            name 'gradle'
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            name 'sonatype'
            url 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:$fg_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'

minecraft {
    version = "$mc_version_2-$forge_version"
    runDir = "run"
    mappings = "snapshot_20180327"

    replace '@VERSION@', project.version
    replace '@FINGERPRINT@', project.findProperty('signSHA1')
    replaceIn "BaseSciences.kt"

}

repositories {
    jcenter ()
    maven { // forgelin
        name 'shadowfacts'
        url 'http://maven.shadowfacts.net/'
    }
    maven { // mmd
        name 'mmd'
        url 'https://maven.mcmoddev.com/'
    }
}

dependencies {
    compile group: "com.mcmoddev", name: "OreSpawn", version: "$mc_version-$os_version"
    compile group: "com.mcmoddev", name: "BaseMetals", version: "$mc_version-$bme_version"
    compile group: "com.mcmoddev", name: "BaseMinerals", version: "$mc_version-$bme_version"
    compile group: "com.mcmoddev", name: "Mineralogy", version:"$mc_version-$min_version"
    compile group: "net.shadowfacts", name: "Forgelin", version: forgelin_version
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar